"""Хеш-таблица — структура данных, предназначенная для эффективного хранения и поиска пар «ключ — значение».
Она использует хеш-функцию для преобразования ключа в индекс, по которому происходит доступ к значению.
Хеш-таблица обеспечивает быстрое выполнение операций вставки, поиска и удаления элементов.
Такие таблицы могут быть похожи на массивы или списки, так как они тоже хранят элементы.
Однако, в отличие от массивов или списков, где доступ к элементу осуществляется по индексу,
в хеш-таблицах доступ к элементу происходит по ключу."""

# Пример простой хэш - таблицы


class HashTable:
    def __init__(self):
        self.size = 10  # Размер хэш - таблицы
        self.table = [None] * self.size  # Инициализация массива со значением None

    def _hash_function(self, key):
        return hash(key) % self.size  # Хэш - функция преобразующая ключ в индекс от 0 до 9, если сделать self.size = 100, от от 0 до 99

    def insert(self, key, value):
        index = self._hash_function(key)
        self.table[index] = value  # Вставка значения (value) по соотвествующему индексу

    def get(self, key):
        index = self._hash_function(key)
        return self.table[index]  # Получение значения по ключу

    def remove(self, key):
        index = self._hash_function(key)
        self.table[index] = None  # Удаление значения по ключу

    def show_hash(self, key):
        return f'{hash(key) % self.size}'


h = HashTable()
print(h.show_hash('axax'))

"""Виды библиотек для работы с хэш - функциями"""
# MD5 (Message Digest Algorithm 5)
# Одна из самых известных хеш-функций,
# которая не рекомендуется для криптографических целей из-за уязвимости к коллизиям.
# Однако MD5 всё ещё может быть полезна для некриптографических задач, таких как проверка целостности данных.

# Семейство SHA (Secure Hash Algorithm)
# SHA-1, SHA-256, SHA-512 и другие версии SHA — криптографические хеш-функции,
# широко используемые для обеспечения безопасности данных.
# Сейчас SHA-256 считается стандартом для многих приложений.
# В чём их различия: SHA-1 создаёт хеш длиной 160 бит,
# в то время как SHA-256 и SHA-512 создают хеши длиной 256 и 512 бит соответственно.
# Чем длиннее хеш, тем больше возможных комбинаций и выше уровень безопасности.

# MurmurHash
# Быстрый и эффективный некриптографический хеш-алгоритм. MurmurHash часто используется в приложениях,
# где требуется быстрый поиск или индексация данных, таких как хеш-таблицы.

# CityHash и FarmHash
# Ещё два хеш-алгоритма, которые обладают высокой скоростью и хорошей равномерностью распределения хеш-значений.
# Они также часто используются в приложениях, где требуется быстрый поиск или индексация.

# CRC (Cyclic Redundancy Check)
# CRC-функции обычно используются для обнаружения ошибок в передаче данных.
# Они быстро вычисляют контрольную сумму для данных и могут эффективно обнаруживать случайные ошибки.

"""Модуль hashlib"""
import hashlib
data = "Hello, World!"
hash_object = hashlib.sha256(data.encode())
hex_digest = hash_object.hexdigest()
print(f"Хеш-значение SHA-256: {hex_digest}") # Выводит хеш-значение SHA-256

"""Библиотека mmh3"""
# Эта библиотека предоставляет реализацию MurmurHash — быстрого и эффективного некриптографического хеш-алгоритма.
# Обычно он используется для хеширования данных в контексте поиска, индексации или фильтрации.
import mmh3
data = "Hello, World!"
hash_value = mmh3.hash(data)
print(f"Выводит хеш-значение MurmurHash: {hash_value}")  # Выводит хеш-значение MurmurHash


"""Библиотека pyhash"""
# Эта библиотека предоставляет широкий выбор хеш-функций,
# включая CRC, CityHash, FarmHash, SpookyHash и другие.
# Она обеспечивает гибкость выбора хеш-функции в зависимости от конкретных потребностей.
# import pyhash
# data = "Hello, World!"
# crc32_hasher = pyhash.crc32()
# hash_value = crc32_hasher(data)
# print(f"Выводит хеш-значение CRC32: {hash_value}")
