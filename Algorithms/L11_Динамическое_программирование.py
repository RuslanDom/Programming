# Наибольшая общая подпоследовательность LCS
A = [1, 4, 22, 7, 3, 5, 1, 6, 9, 70]
B = [1, 8, 5, 22, 4, 3, 5, 6, 70]
"""
Fij = 1 + F(i-1)(j-1), если ai = bj  # ai = A[i-1]
"""
# Подпоследовательность C содержащий Элементы А в исходном порядке, но возможно не все
# Пустая подпоследовательность [] является подпоследовательностью любой последовательности

def lcs(A: list, B: list):
    F: list = [[0] * (len(B) + 1) for _ in range(len(A) + 1)]  # Создание двумерного списка
    for i in range(1, len(A) + 1):
        for j in range(1, len(B) + 1):
            if A[i - 1] == B[j - 1]:  # Проверка, что последние элементы подпоследовательности равны
                F[i][j] = 1 + F[i - 1][j - 1]
            else:
                F[i][j] = max(F[i - 1][j], F[i][j - 1])
    return F[-1][-1]

r = lcs(A, B)
print(r)

# Наибольшая возрастающая подпоследовательность GIS
A = [4, 2, 6, 8, 1, 3, 5, 6 ,2, 9]
"""
Fi - НВП для части A[0:i], которая заканчивается и содержит элемент ai = A[i - 1]
Fi = max(Fj) + 1, при j < i и ai > aj
Fo = 0
"""

def gis(A: list):
    F = [0] * (len(A) + 1)
    for i in range(1, len(A) + 1):
        m = 0
        for j in range(1, i):
            if A[i - 1] > A[j - 1] and F[j] > m:
                m = F[j]
        F[i] = m + 1
    return F[-1]


r = gis(A)
print(r)
















