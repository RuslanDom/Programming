# Наибольшая общая подпоследовательность
A = [5, 2, 3, 6, 1, 4, 7]
B = [8, 6, 2, 1, 3, 4, 5]
# Подпоследовательность C содержащий Элементы А в исходном порядке, но возможно не все
# Пустая подпоследовательность [] является подпослевательностью любой последовательности

def lcs(A: list, B: list):
    F = [[0] * (len(B) + 1) for _ in range(len(A) + 1)]  # Создание двумерного списка
    for i in range(1, len(A) + 1):
        for j in range(1, len(B) + 1):
            if A[i - 1] == B[j - 1]:  # Проверка, что последние элементы подпоследовательности равны
                F[i][j] = 1 + F[i - 1][j - 1]
            else:
                F[i][j] = max(F[i - 1][j], F[i][j - 1])
    return F[-1][-1]

r = lcs(A, B)
print(r)
















